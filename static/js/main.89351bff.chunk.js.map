{"version":3,"sources":["components/controller/controller.js","components/clubForm/clubForm.js","App.js","serviceWorker.js","index.js","components/clubForm/clubForm.module.css","components/controller/controller.module.css"],"names":["url","Controller","props","key","room","state","available","fetch","this","then","response","json","console","log","setState","method","body","JSON","stringify","backgroundColor","availability","styles","backgroundGreen","backgroundRed","className","onClick","clickHandler","bind","Component","ClubForm","submitHandler","club","valueType","event","target","value","date","time","preventDefault","months","i","push","Form","onSubmit","label","onChange","changeHandler","type","required","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.89351bff.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport styles from './controller.module.css';\r\n\r\n\r\nconst url = 'https://tamsinfo-b33c7.firebaseio.com/';\r\n\r\nclass Controller extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n\r\n        let key = null;\r\n        if(this.props.room === 'Kitchenette'){\r\n            key = 'kitchenette';\r\n        } else if(this.props.room === 'TV Room'){\r\n            key = 'tvRoom';\r\n        } // FIXME add more rooms\r\n\r\n        this.state ={\r\n            available: true,\r\n            key: key\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(url + 'roomAvailability/' + this.state.key + '.json')\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            console.log(json)\r\n            this.setState({\r\n                available: json\r\n            });\r\n        });\r\n    }\r\n\r\n    clickHandler(){\r\n        //console.log('clicked');\r\n        fetch(url + 'roomAvailability/' + this.state.key + '.json', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(!this.state.available),\r\n        }).then(response => {\r\n            //console.log(response);\r\n        });\r\n        \r\n        // switch availability\r\n        this.setState({\r\n            available: !this.state.available\r\n        });\r\n    }\r\n\r\n    render(){\r\n\r\n        let backgroundColor = null;\r\n        let availability = null;\r\n        if(this.state.available){\r\n            backgroundColor = styles.backgroundGreen;\r\n            availability = \"This room is available\";\r\n        } else{\r\n            backgroundColor = styles.backgroundRed;\r\n            availability = \"This room is not available\";\r\n        }\r\n\r\n        return(\r\n            <div \r\n                className={`${styles.Controller} ${backgroundColor}`}\r\n                onClick={this.clickHandler.bind(this)}\r\n            >    \r\n                <p className={styles.room}>{this.props.room}</p>\r\n                <p className={styles.availability}>{availability}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Controller;","import React, { Component } from 'react';\r\n\r\nimport styles from './clubForm.module.css';\r\n\r\nconst url = 'https://tamsinfo-b33c7.firebaseio.com/clubEvents/';\r\n\r\nclass ClubForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.submitHandler = this.submitHandler.bind(this);\r\n        this.state = {\r\n            club: 'CSO',\r\n        };\r\n    }\r\n\r\n    changeHandler(valueType, event){\r\n        let state = {};\r\n        state[valueType] = event.target.value;\r\n\r\n        this.setState(state);\r\n    }\r\n\r\n    submitHandler(event){\r\n        fetch(url + `${this.state.club}/${this.state.event}.json`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n               date: this.state.date,\r\n               time: this.state.time\r\n            })\r\n        });\r\n\r\n        console.log(this.state);\r\n        event.preventDefault();\r\n    }\r\n\r\n    render(){\r\n\r\n        let months = [];\r\n        for(let i = 1; i <= 12; ++i){\r\n            months.push(\r\n                <option key={i} value={i}>{i}</option>\r\n            );\r\n        }\r\n\r\n        return(\r\n            <div className={styles.ClubForm}>\r\n                <h3>Add a club event to Alexa</h3>\r\n                <form className={styles.Form} onSubmit={this.submitHandler}>\r\n                    <label>\r\n                        <span className={styles.label}>Club:</span>\r\n                        <select value={this.state.value} onChange={this.changeHandler.bind(this, 'club')} > \r\n                            <option value=\"CSO\">CSO</option>\r\n                            <option value=\"JETS\">JETS</option>\r\n                            <option value=\"RO\">RO</option>\r\n                            <option value=\"Sports\">Sports</option>\r\n                        </select>\r\n                    </label>\r\n\r\n                    <br />\r\n\r\n                    <label>\r\n                        <span className={styles.label}>Event:</span>\r\n                        <input type='text' onChange={this.changeHandler.bind(this, 'event')} required/>\r\n                    </label>\r\n\r\n                    <br />\r\n\r\n                    <span className={styles.label}>Date:</span>\r\n                    <input type='date' onChange={this.changeHandler.bind(this, 'date')} required/>\r\n\r\n                    <br />\r\n\r\n                    <span className={styles.label}>Time:</span>\r\n                    <input type='time' onChange={this.changeHandler.bind(this, 'time')} required/>\r\n\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ClubForm;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\n\nimport './App.css';\n\nimport Controller from './components/controller/controller';\nimport ClubForm from './components/clubForm/clubForm';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to='/clubEvents'>Add a club event to Alexa</Link>\n            </li>\n            <li>\n              <Link to='/availability'>Room Availability</Link>\n            </li>\n            \n          </ul>\n        </nav>\n      </div>\n      <Switch>\n        <Route path='/availability'>\n          <Controller \n              room=\"Kitchenette\"\n            />\n          <Controller\n            room=\"TV Room\"\n          />\n          <Controller\n            room=\"Buley\"\n          />\n        </Route>\n        <Route path='/clubEvents'>\n        <ClubForm />\n        </Route>\n\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ClubForm\":\"clubForm_ClubForm__un1cl\",\"time\":\"clubForm_time__3xd_U\",\"label\":\"clubForm_label__xaL2U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controller\":\"controller_Controller__viNS1\",\"backgroundGreen\":\"controller_backgroundGreen__3rEaZ\",\"backgroundRed\":\"controller_backgroundRed__3yHEv\"};"],"sourceRoot":""}